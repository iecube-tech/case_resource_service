<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace 属性：用于指定当前的映射文件和哪个接口进行映射， 需要指定接口的文件路径， 需要标注包的完整路径接口-->
<mapper namespace="com.iecube.community.model.task_student_group.mapper.TaskStudentGroupMapper">

    <resultMap id="Group" type="com.iecube.community.model.task_student_group.entity.Group">
        <result column="task_id" property="taskId"></result>
        <result column="limit_num" property="limitNum"></result>
    </resultMap>

    <resultMap id="GroupStudent" type="com.iecube.community.model.task_student_group.entity.GroupStudent">
        <result column="group_id" property="groupId"></result>
        <result column="student_id" property="studentId"></result>
    </resultMap>

    <resultMap id="GroupCode" type="com.iecube.community.model.task_student_group.entity.GroupCode">
        <result column="group_id" property="groupId"></result>
        <result column="create_time" property="createTime"></result>
        <result column="unable_time" property="unableTime"></result>
    </resultMap>

    <resultMap id="StudentEntity" type="com.iecube.community.model.student.entity.Student">
        <result column="student_id" property="studentId"></result>
        <result column="student_name" property="studentName"></result>
    </resultMap>

    <resultMap id="TaskStudentsWithGroup" type="com.iecube.community.model.task_student_group.entity.TaskStudentsWithGroup">
        <result column="student_id" property="studentId"></result>
        <result column="student_name" property="studentName"></result>
        <result column="group_id" property="groupId"></result>
        <result column="group_name" property="groupName"></result>
    </resultMap>

    <insert id="addGroup" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO tg_task_student_group (id, name, limit_num, task_id, submitted, creator, create_time, last_modified_user, last_modified_time)
        VALUES (NULL, #{name}, #{limitNum}, #{taskId}, 0,#{creator}, #{createTime}, #{lastModifiedUser}, #{lastModifiedTime})
    </insert>

    <update id="updateGroup">
        UPDATE tg_task_student_group SET
                                         name=#{name},
                                         last_modified_user=#{lastModifiedUser},
                                         last_modified_time=#{lastModifiedTime}
        WHERE id=#{id}
    </update>

    <delete id="delGroup">
        DELETE FROM tg_task_student_group WHERE id=#{id}
    </delete>

    <insert id="GroupAddStudent" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO tg_task_group_student (id, group_id, student_id) VALUES (NULL, #{groupId}, #{studentId})
    </insert>

    <delete id="GroupRemoveStudent">
        DELETE FROM tg_task_group_student WHERE group_id=#{groupId} and student_id=#{studentId}
    </delete>

    <insert id="GroupAddCode" keyProperty="id" useGeneratedKeys="true">
        INSERT INTO tg_task_group_code (id, group_id, code, create_time, unable_time)
        VALUES (NULL, #{groupId}, #{code}, #{createTime}, #{unableTime})
    </insert>

    <delete id="delGroupCode">
        DELETE FROM tg_task_group_code WHERE group_id=#{groupId}
    </delete>

    <update id="updateGroupSubmitted">
        UPDATE tg_task_student_group SET submitted=1 WHERE id=#{groupId}
    </update>

    <select id="getGroupById" resultMap="Group">
        SELECT * FROM tg_task_student_group WHERE id=#{id}
    </select>

    <select id="getGroupByTaskStudent" resultMap="Group">
        SELECT tg_task_student_group.id,
               tg_task_student_group.name,
               tg_task_student_group.task_id,
               tg_task_student_group.limit_num,
               tg_task_student_group.creator,
               tg_task_student_group.submitted
        FROM tg_task_group_student INNER JOIN tg_task_student_group ON tg_task_group_student.group_id=tg_task_student_group.id
        WHERE tg_task_group_student.student_id=#{studentId} and tg_task_student_group.task_id=#{taskId};
    </select>

    <select id="getGroupCodeByCode" resultMap="GroupCode">
        SELECT * FROM tg_task_group_code WHERE code=#{code}
    </select>

    <select id="getGroupCodeByGroupId" resultMap="GroupCode">
        SELECT * FROM tg_task_group_code WHERE group_id=#{groupId}
    </select>

    <select id="getStudentsByGroupId" resultMap="GroupStudent">
        SELECT * FROM tg_task_group_student WHERE group_id=#{groupId}
    </select>

    <select id="getGroupStudentByStudentId" resultMap="GroupStudent">
        SELECT * FROM tg_task_group_student WHERE group_id=
                                                  (SELECT tg_task_group_student.group_id
                                                   FROM tg_task_group_student INNER JOIN tg_task_student_group
                                                       ON tg_task_group_student.group_id=tg_task_student_group.id
                                                   WHERE tg_task_group_student.student_id=#{studentId}
                                                        and tg_task_student_group.task_id=#{taskId});

    </select>
    
    <select id="getStudentByGroup" resultMap="StudentEntity">
        SELECT Student.id, Student.student_id, Student.student_name
        FROM Student INNER JOIN tg_task_group_student ON Student.id=tg_task_group_student.student_id
        WHERE tg_task_group_student.group_id=#{groupId};
    </select>

    <select id="getPstListByGroupAndTaskId" resultType="java.lang.Integer">
        SELECT pst.id FROM ((tg_task_group_student gs INNER JOIN tg_task_student_group pg ON gs.group_id=pg.id)
            INNER JOIN project_task_student pst ON pst.task_id=pg.task_id and pst.student_id=gs.student_id)
            INNER JOIN task ON pst.task_id=task.id WHERE pg.id=#{groupId} and task.num=#{taskNum};
    </select>


    <select id="getTaskStudentsWithGroup" resultMap="TaskStudentsWithGroup">
        SELECT Student.id, Student.student_id, Student.student_name, tg_task_student_group.`name` as `group_name`, tg_task_group_student.group_id
        FROM (tg_task_student_group INNER JOIN tg_task_group_student ON tg_task_student_group.id=tg_task_group_student.group_id) INNER JOIN Student ON tg_task_group_student.student_id=Student.id
        WHERE tg_task_student_group.task_id=#{taskId};
    </select>

</mapper>