<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace 属性：用于指定当前的映射文件和哪个接口进行映射， 需要指定接口的文件路径， 需要标注包的完整路径接口-->
<mapper namespace="com.iecube.community.model.project.mapper.ProjectMapper">

    <resultMap id="ProjectEntity" type="com.iecube.community.model.project.entity.Project">
        <result column="start_time" property="startTime"></result>
        <result column="end_time" property="endTime"></result>
        <result column="create_time" property="createTime"></result>
        <result column="last_modified_user" property="lastModifiedUser"></result>
        <result column="last_modified_time" property="lastModifiedTime"></result>
        <result column="use_group" property="useGroup"></result>
        <result column="group_limit" property="groupLimit"></result>
        <result column="md_course" property="mdCourse"></result>
        <result column="use_remote" property="useRemote"></result>
        <result column="emd_course" property="emdCourse"></result>
    </resultMap>

    <resultMap id="ProjectStudentVo" type="com.iecube.community.model.project.entity.ProjectStudentVo">
        <result column="student_id" property="studentId"></result>
        <result column="student_name" property="studentName"></result>
        <result column="student_grade" property="studentGrade"></result>
        <result column="ps_id" property="psId"></result>
    </resultMap>

    <resultMap id="StudentDto" type="com.iecube.community.model.student.entity.StudentDto">
        <result column="student_id" property="studentId"></result>
        <result column="student_name" property="studentName"></result>
        <result column="student_grade" property="studentGrade"></result>
        <result column="student_class" property="studentClass"></result>
    </resultMap>

    <insert id="insert" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO project (id, case_id,device_id, project_name, introduction, introduce, cover, target,
                             start_time, end_time, creator, create_time, last_modified_user, last_modified_time,
                             use_group, group_limit, md_course, use_remote)
        VALUES (NULL,#{caseId},#{deviceId}, #{projectName}, #{introduction}, #{introduce}, #{cover}, #{target},
                   #{startTime}, #{endTime}, #{creator}, #{createTime}, #{lastModifiedUser}, #{lastModifiedTime},
                #{useGroup}, #{groupLimit}, #{mdCourse}, #{useRemote})
    </insert>

    <update id="delete">
        UPDATE project SET is_delete=1 WHERE id=#{id}
    </update>

    <update id="hidden">
        UPDATE project SET hidden=1 WHERE id=#{id}
    </update>

    <update id="disHidden">
        UPDATE project SET hidden=0 WHERE id=#{id}
    </update>

    <select id="findById" resultMap="ProjectEntity">
        SELECT project.id,project.case_id, project.device_id, project.project_name, project.target,project.introduction,project.introduce,
               project.cover,project.start_time,project.end_time, project.use_group, project.group_limit,  project.md_course,
               project.use_remote,solution_or_case.emd_course
        FROM project INNER JOIN solution_or_case ON project.case_id=solution_or_case.id
        WHERE project.id=#{id}
    </select>

    <select id="findByPstId" resultMap="ProjectEntity">
        SELECT p.id, p.case_id,device_id, p.project_name, p.introduction, p.introduce, p.cover, p.target,
               p.start_time, p.end_time, p.creator, p.create_time, p.last_modified_user, p.last_modified_time,
               p.use_group, p.group_limit, p.md_course, p.use_remote
        FROM project p INNER JOIN project_task_student pst ON p.id=pst.project_id WHERE pst.id=#{pstId};
    </select>

    <select id="findCaseTypeByCaseId" resultType="java.lang.Integer">
        SELECT third FROM solution_or_case WHERE id=#{case_id}
    </select>


    <select id="findByCreator" resultMap="ProjectEntity">
        SELECT * FROM project WHERE creator=#{teacher} AND hidden=0 AND is_delete=0
    </select>

    <select id="findByCreatorNotDel" resultMap="ProjectEntity">
        SELECT * FROM project WHERE creator=#{teacher} AND is_delete=0
    </select>


    <insert id="addProjectStudent" useGeneratedKeys="true" keyProperty="id"
            parameterType="com.iecube.community.model.project.entity.ProjectStudent">
        INSERT INTO project_student (id, project_id, student_id, creator, create_time) VALUES (NULL, #{projectId}, #{studentId}, #{creator}, #{createTime})
    </insert>

    <select id="findStudentsByProjectId" resultMap="ProjectStudentVo">
        SELECT Student.id,Student.student_id,Student.student_name,project_student.grade AS student_grade, project_student.id AS ps_id
        FROM project_student INNER JOIN Student ON project_student.student_id=Student.id
        WHERE project_student.project_id=#{projectId};
    </select>

    <select id="findStudentsPSTByProjectId" resultMap="ProjectStudentVo">
        SELECT Student.id,Student.student_id,Student.student_name,project_student.grade AS student_grade, project_task_student.id AS pst_id
        FROM project_student INNER JOIN Student ON project_student.student_id=Student.id INNER JOIN project_task_student ON Student.id=project_task_student.student_id and project_student.project_id=project_task_student.project_id
        WHERE project_student.project_id=#{projectId} ORDER BY id;
    </select>

    <select id="findByStudentId" resultMap="ProjectEntity">
        SELECT project.id, project.project_name,project.target,project.introduction,project.introduce,
               project.cover,project.start_time,project.end_time,project_student.grade, project.use_group, project.md_course,
               project.use_remote,solution_or_case.emd_course
        FROM (project_student INNER JOIN project ON project_student.project_id=project.id) INNER JOIN solution_or_case
            ON project.case_id=solution_or_case.id
        WHERE project_student.student_id=#{id} AND project.is_delete=0 AND solution_or_case.third=0
    </select>

    <select id="findCourseByStudentId" resultMap="ProjectEntity">
        SELECT project.id, project.project_name,project.target,project.introduction,project.introduce,
               project.cover,project.start_time,project.end_time,project_student.grade, project.use_group, project.md_course,
               project.use_remote, solution_or_case.emd_course
        FROM (project_student INNER JOIN project ON project_student.project_id=project.id) INNER JOIN solution_or_case
                                                                                                      ON project.case_id=solution_or_case.id
        WHERE project_student.student_id=#{id} AND project.is_delete=0 AND solution_or_case.third=1
    </select>

    <select id="findStudentIdByProjectId" resultType="java.lang.Integer" >
        SELECT student_id FROM project_student WHERE project_id=#{projectId}
    </select>

    <select id="studentNumOfCurrentProject" resultType="java.lang.Integer">
        SELECT COUNT(id) FROM project_student WHERE project_id=#{projectId}
    </select>

    <select id="findByCaseId" resultMap="ProjectEntity">
        SELECT * FROM project WHERE case_id=#{caseId}
    </select>

    <select id="findProjectStudent" resultMap="ProjectStudentVo" >
        SELECT Student.id,Student.student_id,Student.student_name,project_student.grade AS student_grade, project_student.id AS ps_id
        FROM project_student INNER JOIN Student ON project_student.student_id=Student.id
        WHERE project_student.project_id=#{projectId} AND project_student.student_id=#{studentId}
    </select>

    <update id="updateProjectStudentGrade">
        UPDATE project_student SET grade=#{grade} WHERE id=#{id}
    </update>

    <select id="getProjectStudents" resultMap="StudentDto">
        SELECT Student.id, Student.email, Student.student_id, Student.student_name
        FROM Student INNER JOIN project_student ON Student.id=project_student.student_id
        WHERE project_student.project_id=#{projectId};
    </select>

</mapper>