<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace 属性：用于指定当前的映射文件和哪个接口进行映射， 需要指定接口的文件路径， 需要标注包的完整路径接口-->
<mapper namespace="com.iecube.community.model.student.mapper.StudentMapper">

    <resultMap id="StudentEntity" type="com.iecube.community.model.student.entity.Student">
        <result column="student_id" property="studentId"></result>
        <result column="student_name" property="studentName"></result>
        <result column="student_grade" property="studentGrade"></result>
        <result column="student_class" property="studentClass"></result>
        <result column="create_time" property="createTime"></result>
        <result column="last_modified_user" property="lastModifiedUser"></result>
        <result column="last_modified_time" property="lastModifiedTime"></result>
    </resultMap>

    <resultMap id="StudentDto" type="com.iecube.community.model.student.entity.StudentDto">
        <result column="student_id" property="studentId"></result>
        <result column="student_name" property="studentName"></result>
        <result column="student_grade" property="studentGrade"></result>
        <result column="student_class" property="studentClass"></result>
    </resultMap>

    <insert id="addStudent" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO Student (id, email, student_id, student_name, student_class,major_id,status, password, salt,
                             creator, create_time, last_modified_user, last_modified_time)
        VALUES (NULL, #{email}, #{studentId}, #{studentName}, #{studentClass}, #{majorId}, #{status}, #{password}, #{salt},
                   #{creator}, #{createTime}, #{lastModifiedUser}, #{lastModifiedTime} )
    </insert>

    <select id="findStudentsLimitByTeacher" resultMap="StudentDto">
        SELECT Student.id, Student.student_id as student_id, Student.student_name,class_and_grade.grade as student_grade,
               class_and_grade.name as student_class, Major.name as major, Collage.name as collage, School.`name` as school
        FROM Student RIGHT JOIN Major ON Student.major_id=Major.id RIGHT JOIN Collage ON Major.collage_id=Collage.id
            RIGHT JOIN School ON Collage.school_id=School.id
            RIGHT JOIN class_and_grade ON class_and_grade.id=Student.student_class
        WHERE (Student.major_id in (SELECT id FROM Major WHERE collage_id=(SELECT collage_id FROM teacher WHERE id=#{teacherId}))
                   OR Student.creator=#{teacherId}) AND Student.status=1
        ORDER BY school, major, collage, student_grade, student_class, student_id
        LIMIT #{page},#{pageSize}
    </select>

    <select id="findAllInStatusByTeacher" resultMap="StudentDto">
        SELECT Student.id, Student.student_id as student_id, Student.student_name,class_and_grade.grade as student_grade,
               class_and_grade.name as student_class, Major.name as major, Collage.name as collage, School.`name` as school
        FROM Student RIGHT JOIN Major ON Student.major_id=Major.id RIGHT JOIN Collage ON Major.collage_id=Collage.id
                     RIGHT JOIN School ON Collage.school_id=School.id
                     RIGHT JOIN class_and_grade ON class_and_grade.id=Student.student_class
        WHERE (Student.major_id in (SELECT id FROM Major WHERE collage_id=(SELECT collage_id FROM teacher WHERE id=#{teacherId}))
            OR Student.creator=#{teacherId}) AND Student.status=1
        ORDER BY school, major, collage, student_grade, student_class, student_id
    </select>

    <update id="deleteStudent">
        DELETE FROM Student WHERE id=#{id}
    </update>

    <select id="getById" resultMap="StudentDto">
        SELECT Student.id, Student.email, Student.student_id, Student.student_name,class_and_grade.grade as student_grade,
               class_and_grade.name as student_class, Major.name as major, Collage.name as collage
        FROM ((Student INNER JOIN Major ON Student.major_id=Major.id) INNER JOIN Collage ON Major.collage_id=Collage.id)
                 INNER JOIN class_and_grade ON class_and_grade.id=Student.student_class
        WHERE Student.id=#{id}
    </select>
    
    <select id="getStudentById" resultMap="StudentEntity">
        SELECT * FROM Student WHERE id=#{id}
    </select>

    <select id="getByEmail" resultMap="StudentEntity">
        SELECT * FROM Student WHERE email=#{email}
    </select>

    <update id="changePassword">
        UPDATE Student SET password=#{password} WHERE id=#{id}
    </update>

    <select id="getByStudentId" resultMap="StudentEntity">
        SELECT * FROM Student WHERE student_id=#{StudentId}
    </select>

    <select id="studentsNum" resultType="java.lang.Integer">
        SELECT COUNT(Student.id)
        FROM Student
        WHERE (Student.major_id in (SELECT id FROM Major WHERE collage_id=(SELECT collage_id FROM teacher WHERE id=#{teacherId}))
                   OR Student.creator=#{teacherId}) AND Student.status=1
    </select>

    <select id="allStudentNum" resultType="java.lang.Integer">
        SELECT COUNT(Student.id)
        FROM Student
        WHERE Student.status=1
    </select>

    <select id="findAllStudentLimit" resultMap="StudentDto">
        SELECT Student.id, Student.student_id as student_id, Student.student_name,class_and_grade.grade as student_grade,
               class_and_grade.name as student_class, Major.name as major, Collage.name as collage, School.`name` as school
        FROM Student RIGHT JOIN Major ON Student.major_id=Major.id RIGHT JOIN Collage ON Major.collage_id=Collage.id RIGHT JOIN School ON Collage.school_id=School.id
                     RIGHT JOIN class_and_grade ON class_and_grade.id=Student.student_class
        WHERE Student.`status`=1
        ORDER BY school, major, collage, student_grade, student_class, student_id
        LIMIT #{page},#{pageSize}
    </select>

    <select id="findAllStudent" resultMap="StudentDto">
        SELECT Student.id, Student.student_id as student_id, Student.student_name,class_and_grade.grade as student_grade,
               class_and_grade.name as student_class, Major.name as major, Collage.name as collage, School.`name` as school
        FROM Student RIGHT JOIN Major ON Student.major_id=Major.id RIGHT JOIN Collage ON Major.collage_id=Collage.id RIGHT JOIN School ON Collage.school_id=School.id
                     RIGHT JOIN class_and_grade ON class_and_grade.id=Student.student_class
        WHERE Student.`status`=1
        ORDER BY school, major, collage, student_grade, student_class, student_id
    </select>

    <select id="findByGradeClass" resultMap="StudentDto">
        SELECT Student.id, Student.student_id as student_id, Student.student_name,class_and_grade.grade as student_grade,
               class_and_grade.name as student_class, Major.name as major, Collage.name as collage, School.`name` as school
        FROM Student RIGHT JOIN Major ON Student.major_id=Major.id RIGHT JOIN Collage ON Major.collage_id=Collage.id RIGHT JOIN School ON Collage.school_id=School.id
                     RIGHT JOIN class_and_grade ON class_and_grade.id=Student.student_class
        WHERE class_and_grade.`id`=#{gradeClass}
        ORDER BY school, major, collage, student_grade, student_class, student_id
    </select>

    <select id="findByGradeClassIdList" resultMap="StudentDto">
        SELECT Student.id, Student.student_id as student_id, Student.student_name,class_and_grade.grade as student_grade,
               class_and_grade.name as student_class, Major.name as major, Collage.name as collage, School.`name` as school
        FROM Student RIGHT JOIN Major ON Student.major_id=Major.id RIGHT JOIN Collage ON Major.collage_id=Collage.id RIGHT JOIN School ON Collage.school_id=School.id
                     RIGHT JOIN class_and_grade ON class_and_grade.id=Student.student_class
        WHERE class_and_grade.`id` IN
        <foreach collection="idList" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
        ORDER BY school, major, collage, student_grade, student_class, student_id
    </select>

    <select id="findByIdList" resultMap="StudentDto">
        SELECT Student.id, Student.student_id as student_id, Student.student_name,class_and_grade.grade as student_grade,
               class_and_grade.name as student_class, Major.name as major, Collage.name as collage, School.`name` as school
        FROM Student RIGHT JOIN Major ON Student.major_id=Major.id RIGHT JOIN Collage ON Major.collage_id=Collage.id RIGHT JOIN School ON Collage.school_id=School.id
                     RIGHT JOIN class_and_grade ON class_and_grade.id=Student.student_class
        WHERE Student.id IN
        <foreach collection="idList" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
        ORDER BY school, major, collage, student_grade, student_class, student_id
    </select>
</mapper>